package service

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i gitlab.ozon.dev/cyxrop/homework-2/internal/app/service/user.MailboxRepository -o ./internal/app/service/user/mailbox_repository_mock_test.go -n MailboxRepositoryMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"gitlab.ozon.dev/cyxrop/homework-2/internal/app/models"
)

// MailboxRepositoryMock implements MailboxRepository
type MailboxRepositoryMock struct {
	t minimock.Tester

	funcUpdate          func(ctx context.Context, m1 models.Mailbox) (err error)
	inspectFuncUpdate   func(ctx context.Context, m1 models.Mailbox)
	afterUpdateCounter  uint64
	beforeUpdateCounter uint64
	UpdateMock          mMailboxRepositoryMockUpdate
}

// NewMailboxRepositoryMock returns a mock for MailboxRepository
func NewMailboxRepositoryMock(t minimock.Tester) *MailboxRepositoryMock {
	m := &MailboxRepositoryMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.UpdateMock = mMailboxRepositoryMockUpdate{mock: m}
	m.UpdateMock.callArgs = []*MailboxRepositoryMockUpdateParams{}

	return m
}

type mMailboxRepositoryMockUpdate struct {
	mock               *MailboxRepositoryMock
	defaultExpectation *MailboxRepositoryMockUpdateExpectation
	expectations       []*MailboxRepositoryMockUpdateExpectation

	callArgs []*MailboxRepositoryMockUpdateParams
	mutex    sync.RWMutex
}

// MailboxRepositoryMockUpdateExpectation specifies expectation struct of the MailboxRepository.Update
type MailboxRepositoryMockUpdateExpectation struct {
	mock    *MailboxRepositoryMock
	params  *MailboxRepositoryMockUpdateParams
	results *MailboxRepositoryMockUpdateResults
	Counter uint64
}

// MailboxRepositoryMockUpdateParams contains parameters of the MailboxRepository.Update
type MailboxRepositoryMockUpdateParams struct {
	ctx context.Context
	m1  models.Mailbox
}

// MailboxRepositoryMockUpdateResults contains results of the MailboxRepository.Update
type MailboxRepositoryMockUpdateResults struct {
	err error
}

// Expect sets up expected params for MailboxRepository.Update
func (mmUpdate *mMailboxRepositoryMockUpdate) Expect(ctx context.Context, m1 models.Mailbox) *mMailboxRepositoryMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("MailboxRepositoryMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &MailboxRepositoryMockUpdateExpectation{}
	}

	mmUpdate.defaultExpectation.params = &MailboxRepositoryMockUpdateParams{ctx, m1}
	for _, e := range mmUpdate.expectations {
		if minimock.Equal(e.params, mmUpdate.defaultExpectation.params) {
			mmUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdate.defaultExpectation.params)
		}
	}

	return mmUpdate
}

// Inspect accepts an inspector function that has same arguments as the MailboxRepository.Update
func (mmUpdate *mMailboxRepositoryMockUpdate) Inspect(f func(ctx context.Context, m1 models.Mailbox)) *mMailboxRepositoryMockUpdate {
	if mmUpdate.mock.inspectFuncUpdate != nil {
		mmUpdate.mock.t.Fatalf("Inspect function is already set for MailboxRepositoryMock.Update")
	}

	mmUpdate.mock.inspectFuncUpdate = f

	return mmUpdate
}

// Return sets up results that will be returned by MailboxRepository.Update
func (mmUpdate *mMailboxRepositoryMockUpdate) Return(err error) *MailboxRepositoryMock {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("MailboxRepositoryMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &MailboxRepositoryMockUpdateExpectation{mock: mmUpdate.mock}
	}
	mmUpdate.defaultExpectation.results = &MailboxRepositoryMockUpdateResults{err}
	return mmUpdate.mock
}

//Set uses given function f to mock the MailboxRepository.Update method
func (mmUpdate *mMailboxRepositoryMockUpdate) Set(f func(ctx context.Context, m1 models.Mailbox) (err error)) *MailboxRepositoryMock {
	if mmUpdate.defaultExpectation != nil {
		mmUpdate.mock.t.Fatalf("Default expectation is already set for the MailboxRepository.Update method")
	}

	if len(mmUpdate.expectations) > 0 {
		mmUpdate.mock.t.Fatalf("Some expectations are already set for the MailboxRepository.Update method")
	}

	mmUpdate.mock.funcUpdate = f
	return mmUpdate.mock
}

// When sets expectation for the MailboxRepository.Update which will trigger the result defined by the following
// Then helper
func (mmUpdate *mMailboxRepositoryMockUpdate) When(ctx context.Context, m1 models.Mailbox) *MailboxRepositoryMockUpdateExpectation {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("MailboxRepositoryMock.Update mock is already set by Set")
	}

	expectation := &MailboxRepositoryMockUpdateExpectation{
		mock:   mmUpdate.mock,
		params: &MailboxRepositoryMockUpdateParams{ctx, m1},
	}
	mmUpdate.expectations = append(mmUpdate.expectations, expectation)
	return expectation
}

// Then sets up MailboxRepository.Update return parameters for the expectation previously defined by the When method
func (e *MailboxRepositoryMockUpdateExpectation) Then(err error) *MailboxRepositoryMock {
	e.results = &MailboxRepositoryMockUpdateResults{err}
	return e.mock
}

// Update implements MailboxRepository
func (mmUpdate *MailboxRepositoryMock) Update(ctx context.Context, m1 models.Mailbox) (err error) {
	mm_atomic.AddUint64(&mmUpdate.beforeUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdate.afterUpdateCounter, 1)

	if mmUpdate.inspectFuncUpdate != nil {
		mmUpdate.inspectFuncUpdate(ctx, m1)
	}

	mm_params := &MailboxRepositoryMockUpdateParams{ctx, m1}

	// Record call args
	mmUpdate.UpdateMock.mutex.Lock()
	mmUpdate.UpdateMock.callArgs = append(mmUpdate.UpdateMock.callArgs, mm_params)
	mmUpdate.UpdateMock.mutex.Unlock()

	for _, e := range mmUpdate.UpdateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdate.UpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdate.UpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdate.UpdateMock.defaultExpectation.params
		mm_got := MailboxRepositoryMockUpdateParams{ctx, m1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdate.t.Errorf("MailboxRepositoryMock.Update got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdate.UpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdate.t.Fatal("No results are set for the MailboxRepositoryMock.Update")
		}
		return (*mm_results).err
	}
	if mmUpdate.funcUpdate != nil {
		return mmUpdate.funcUpdate(ctx, m1)
	}
	mmUpdate.t.Fatalf("Unexpected call to MailboxRepositoryMock.Update. %v %v", ctx, m1)
	return
}

// UpdateAfterCounter returns a count of finished MailboxRepositoryMock.Update invocations
func (mmUpdate *MailboxRepositoryMock) UpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.afterUpdateCounter)
}

// UpdateBeforeCounter returns a count of MailboxRepositoryMock.Update invocations
func (mmUpdate *MailboxRepositoryMock) UpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.beforeUpdateCounter)
}

// Calls returns a list of arguments used in each call to MailboxRepositoryMock.Update.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdate *mMailboxRepositoryMockUpdate) Calls() []*MailboxRepositoryMockUpdateParams {
	mmUpdate.mutex.RLock()

	argCopy := make([]*MailboxRepositoryMockUpdateParams, len(mmUpdate.callArgs))
	copy(argCopy, mmUpdate.callArgs)

	mmUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateDone returns true if the count of the Update invocations corresponds
// the number of defined expectations
func (m *MailboxRepositoryMock) MinimockUpdateDone() bool {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateInspect logs each unmet expectation
func (m *MailboxRepositoryMock) MinimockUpdateInspect() {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MailboxRepositoryMock.Update with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		if m.UpdateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MailboxRepositoryMock.Update")
		} else {
			m.t.Errorf("Expected call to MailboxRepositoryMock.Update with params: %#v", *m.UpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		m.t.Error("Expected call to MailboxRepositoryMock.Update")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *MailboxRepositoryMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockUpdateInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *MailboxRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *MailboxRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockUpdateDone()
}
